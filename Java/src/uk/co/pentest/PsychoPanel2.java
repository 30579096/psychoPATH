/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.co.pentest.psychoPATH;

import burp.IHttpRequestResponse;
import java.awt.event.ItemEvent;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.ListSelectionModel;

/**
 *
 * @author julian
 */
public class PsychoPanel2 extends javax.swing.JPanel {

    /**
     * Creates new form psychoPanel2
     */
    
    protected boolean addFilePrefix=false; // whether to include file:/// in front of the absolute paths    
    protected int defaultMaxTraversalsPerPayload=18; 
    protected int maxTraversalsPerPayload=18; // the number of maximum traversals in our payloads - used to pick the longest ones while optimizing - later we'll just calculate this value on the fly
    protected boolean optimizeDocroots=true; // whether to only prepend docroots with the longest versions of traversals
    protected boolean evasiveTechniques=false;
    protected boolean optimizeLFI=true; // whether to only prepend the filename with the longest versions of traversals when in LFI mode
    protected boolean LFImode=true; // whether we are in the LFI hunting mode - whether or not to use webroots at all
    protected boolean useAbsoluteWebroots=true; 
    public boolean scannerChecks=true;

    protected String byteGeneratorRange;
    
    protected String proto="https";
    protected String hostname="example.org";
    protected ArrayList<String> genericSuffixes;    
    protected String[] defaultBreakups = {"20"}; // by default the only {BREAK} string is a white space (20 asciihex)
    protected String[] nonRecurrentEvasiveTraversals =  {"....//", "...//", ".....///"};  
    protected String[] mixedSlashEvasiveTraversals = {"...\\./", ".../.\\"}; 
    protected String[] breakupHolderTraversals = {".{BREAK}.{BREAK}/","..{BREAK}/","{BREAK}../",".{BREAK}./","../{BREAK}"};     // currently the only break-up char is space; we'll make this customizable as well
    // other, yet not supported variants (might be added later)
    // break up holders mixed with non-recurrent filters
    // non-recurrent filter cases with mixed win-nix slashes
    // non-recurrent filter cases with mixed win-nix slashes mixed with break-up character    
    protected String slashesToUse="all"; // possible values: nix,win,all
    PrintWriter stdout;
    
    
    public void updateScope(String proto, String hostname)
    {
        this.proto=proto;
        this.hostname=hostname;
        // ok, now we update the targets
 
        ArrayList<String> newList = new ArrayList<String>();
        newList.add(hostname);
        // if hostname is not an IP address - but contains dots, it is a domain name
        String ipPattern = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
               
        Pattern pattern = Pattern.compile(ipPattern);
        Matcher matcher = pattern.matcher(hostname);
        if(!matcher.matches())
        {
            // in such case split the string by dots, remove the tld
            // and propagate the list
            String[] parts = hostname.split(".");
            for(int i=0;i<parts.length-1;i++)
            {
                newList.add(parts[i]);
            }
        }
        // propagate the list to the interface
        
        
        targetsList.setListData((String[])newList.toArray());       
        // now is the time to update suffixes
        genericSuffixes.clear();
        IHttpRequestResponse[] items = PsychoPATH.callbacks.getSiteMap(proto+"://"+hostname);
        for(int i=0;i<items.length;i++)
        {
            //if(items[i].getStatusCode()!=404) continue; // skipping 404s might not be a good idea - some servers return 404s for existing directories when no deeper existing URI is requested            
	    String path=PsychoPATH.callbacks.getHelpers().analyzeRequest(items[i]).getUrl().getPath();
            path=path.substring(0,path.lastIndexOf("/"));
            if(!genericSuffixes.contains(path)) 
            {                
                genericSuffixes.add(path);
                //logOutput("Adding "+path+" to the dir check payloads and attack suffixes.\n");
            }
        }        
        // we propagate the list to the GUI, so it can be adjusted before the attack
        String[] arr;
        arr = new String[genericSuffixes.size()];
        for(int i =0;i<genericSuffixes.size();i++)
        {
            arr[i]=genericSuffixes.get(i);
        }        
        appendListData(suffixesList,arr); // we cannot cast, we'll just merge              
        // for some reason this no longer updates in the UI... still works, but it looks like it didn't...
        // the genericSuffixes list will, in turn, be used by the directory checker logic of the IntruderPayloadGenerator
        
        if(hostname!="example.org") this.logOutput("Scope propagated.\n");
        
    }
    
    protected void appendListData(JList list, String[] items)
    {
        ArrayList tmp = new ArrayList();

         for (int i=0; i < list.getModel().getSize(); i++) {
            String elem = (String) list.getModel().getElementAt(i);           
            tmp.add(elem);
        }
        for(String item: items)
        {
            if(!tmp.contains(item)) tmp.add(item);
        }
        list.setListData(tmp.toArray());
    }
    private void removeFromListData(JList list, String item)
    {
        ArrayList tmp = new ArrayList();

         for (int i=0; i < list.getModel().getSize(); i++) {
            String elem = (String) list.getModel().getElementAt(i); 
            if(!elem.equals(item)) tmp.add(elem);
        }
        list.setListData(tmp.toArray());
    }
    private void initiateEvasiveList()
    {
        appendListData(evasiveList,this.nonRecurrentEvasiveTraversals);
        String n[]={this.breakupHolderTraversals[0]}; 
        appendListData(evasiveList,n);
        this.evasiveTechniques=true;
    }
    private void disableEvasiveTechniques()
    {
        String [] empty = {};
        evasiveList.setListData(empty); //for some weird reason removeAll did not want to work. 
        this.evasiveTechniques=false;
    }
    private void clearBreakups()
    {
        String [] empty={};
        breakupList.setListData(empty); // if breakup-list is empty, break-up payloads are ignored
        // additionally, we could search the list and remove elements with the {BREAK} holder
    }
    private void initiateBreakups()
    {
        appendListData(breakupList,this.defaultBreakups);
    }
    private void initiateEncodings() // same as clear, no encoding by default
    {
        //String empty[] = {"None"};
        //encodeList.setListData(empty);
    }
    private void clearDrives()
    {
        String [] empty={};
        drivesList.setListData(empty);
    }
    private void enableLFIMode()
    {
        LFImode=true;
        LFIOptimizeCheckBox.setEnabled(true); 
        LFIOptimizeCheckBox.setSelected(true);
        optimizeLFI=true;
        optimizeDocrootTraversalsBox.setEnabled(false);
        
        useAbsoluteWebrootsBox.setEnabled(false);
        //LFIModeCheckBox.setEnabled(true);
        LFIModeCheckBox.setSelected(true);
                
        drivesList.setEnabled(false);
        windowsDrivesToUse.setEnabled(false);
    }
    private void disableLFIMode()
    {
        LFImode=false;
        LFIOptimizeCheckBox.setEnabled(false);
        optimizeDocrootTraversalsBox.setEnabled(true);        

        useAbsoluteWebrootsBox.setEnabled(true);
        
        LFIModeCheckBox.setSelected(false);
        if(useAbsoluteWebroots)
        {
            drivesList.setEnabled(true);
            windowsDrivesToUse.setEnabled(true);
        }                    
    }
    
    public void logOutput(String msg)
    {
        //this.logOutput.append(msg);
        stdout.println(msg);
    }
    
    protected void enableScannerChecks()
    {
        scannerChecksCheckbox.setSelected(true);
        this.scannerChecks=true; 
    }
    protected void disableScannerChecks()
    {
        scannerChecksCheckbox.setSelected(false);
        this.scannerChecks=false; 
    }    
    public PsychoPanel2() {
        // some init:
        stdout = new PrintWriter(PsychoPATH.callbacks.getStdout(), true);
        genericSuffixes=new ArrayList<>();
        
        // auto-generated init:
        initComponents();
        
        // more custom init:

        
        this.byteGeneratorRange="non-alpha";
        enableLFIMode();
        enableScannerChecks();
        evasiveList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);        
        evasiveList.setLayoutOrientation(JList.VERTICAL);
        evasiveList.setVisibleRowCount(10);
        
        breakupHexFormat.setSelected(true);
        breakupASCIIFormat.setSelected(false);
        /*
        optimizeDocrootTraversalsBox.setEnabled(false);
        optimizeDocrootTraversalsBox.setSelected(true);   
        
        useAbsoluteWebrootsBox.setEnabled(false);
        useAbsoluteWebrootsBox.setSelected(true);
        
        LFIModeCheckBox.setEnabled(true);
        LFIModeCheckBox.setSelected(true);
        
        LFIOptimizeCheckBox.setEnabled(true);
        LFIOptimizeCheckBox.setSelected(true);
        */
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        optimizeDocrootTraversalsBox = new javax.swing.JCheckBox();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        suffixesList = new javax.swing.JList<>();
        suffixPasteButton = new javax.swing.JButton();
        suffixLoadButton = new javax.swing.JButton();
        suffixRemoveButton = new javax.swing.JButton();
        suffixClearButton = new javax.swing.JButton();
        suffixAddButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        suffixAddField = new javax.swing.JTextPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        targetsList = new javax.swing.JList<>();
        targetPasteButton = new javax.swing.JButton();
        targetLoadButton = new javax.swing.JButton();
        targetRemoveButton = new javax.swing.JButton();
        targetClearButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        docrootsList = new javax.swing.JList<>();
        webrootPasteButton = new javax.swing.JButton();
        webrootLoadButton = new javax.swing.JButton();
        webrootRemoveButton = new javax.swing.JButton();
        webrootCLearButton = new javax.swing.JButton();
        webrootAddButton = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        webrootAddField = new javax.swing.JTextPane();
        jComboBox4 = new javax.swing.JComboBox<>();
        windowsDrivesToUse = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        drivesList = new javax.swing.JList<>();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        slashesToUseCombo = new javax.swing.JComboBox<>();
        useAbsoluteWebrootsBox = new javax.swing.JCheckBox();
        LFIModeCheckBox = new javax.swing.JCheckBox();
        LFIOptimizeCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        scannerChecksCheckbox = new javax.swing.JCheckBox();
        jComboBox3 = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        fileNameField = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        byteGeneratorRangeCombo = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        evasiveList = new javax.swing.JList<>();
        evasiveTechniquesSetToAdd = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        breakupList = new javax.swing.JList<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        rawEncodingCheckbox = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        doubleUrl = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        breakupASCIIFormat = new javax.swing.JRadioButton();
        breakupHexFormat = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();

        jLabel7.setText("jLabel7");

        optimizeDocrootTraversalsBox.setText("Optimize webroot payloads");
        optimizeDocrootTraversalsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optimizeDocrootTraversalsBoxActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportView(suffixesList);

        suffixPasteButton.setText("Paste");

        suffixLoadButton.setText("Load");
        suffixLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suffixLoadButtonActionPerformed(evt);
            }
        });

        suffixRemoveButton.setText("Remove");
        suffixRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suffixRemoveButtonActionPerformed(evt);
            }
        });

        suffixClearButton.setText("Clear");
        suffixClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suffixClearButtonActionPerformed(evt);
            }
        });

        suffixAddButton.setText("Add");
        suffixAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suffixAddButtonActionPerformed(evt);
            }
        });

        jScrollPane8.setViewportView(suffixAddField);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(suffixPasteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(suffixLoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(suffixRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(suffixClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(suffixAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(579, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suffixPasteButton)
                    .addComponent(suffixLoadButton)
                    .addComponent(suffixRemoveButton)
                    .addComponent(suffixClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(suffixAddButton)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(232, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Relative directories (\"suffixes\")", jPanel6);

        targetsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "example.org" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(targetsList);
        targetsList.getAccessibleContext().setAccessibleName("targetsList");

        targetPasteButton.setText("Paste");
        targetPasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetPasteButtonActionPerformed(evt);
            }
        });

        targetLoadButton.setText("Load");

        targetRemoveButton.setText("Remove");

        targetClearButton.setText("Clear");

        jButton5.setText("Add");

        jScrollPane6.setViewportView(jTextPane3);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(targetPasteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(targetLoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(targetRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(targetClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(590, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetPasteButton)
                    .addComponent(targetLoadButton)
                    .addComponent(targetRemoveButton)
                    .addComponent(targetClearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(227, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Targets", jPanel7);

        docrootsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "/var/www", "/usr/local/httpd", "/usr/local/www", "/usr/local/httpd/{TARGET}", "/usr/local/www/{TARGET}", "/srv/www", "/var/www/html", "/var/www/{TARGET}", "/srv/www/{TARGET}", "/var/www/html/{TARGET}", "/var/www/vhosts/{TARGET}", "/var/www/virtual/{TARGET}", "/var/www/clients/vhosts/{TARGET}", "/var/www/clients/virtual/{TARGET}", "/usr/local/apache", "/usr/local/apache2", "/usr/local/apache/{TARGET}", "/usr/local/apache2/{TARGET}", "/usr/local/www/apache/{TARGET}", "/usr/local/www/apache24/{TARGET}", "/usr/local/{TARGET}/apache/www/apache22/{TARGET}", "/usr/local/apache/www/apache22/{TARGET}" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane9.setViewportView(docrootsList);

        webrootPasteButton.setText("Paste");

        webrootLoadButton.setText("Load");
        webrootLoadButton.setToolTipText("");

        webrootRemoveButton.setText("Remove");

        webrootCLearButton.setText("Clear");

        webrootAddButton.setText("Add");

        jScrollPane10.setViewportView(webrootAddField);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Universal", "Nginx", "Apache", "Tomcat", "Windows", "All" }));

        windowsDrivesToUse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C", "D", "E", "F", "G", "H", "I", "J", "All except A,B", "All" }));
        windowsDrivesToUse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowsDrivesToUseActionPerformed(evt);
            }
        });

        jLabel1.setText("Windows drives to use:");

        drivesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "C:" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane11.setViewportView(drivesList);

        jButton16.setText("Remove");

        jButton17.setText("Clear");

        jLabel9.setText("Add from the built-in list below:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(windowsDrivesToUse, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 181, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(webrootCLearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(webrootRemoveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(webrootPasteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(webrootLoadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(webrootAddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(44, 44, 44)
                                .addComponent(jScrollPane10)))
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(webrootPasteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(webrootLoadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(webrootRemoveButton)
                        .addGap(5, 5, 5)
                        .addComponent(webrootCLearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(webrootAddButton)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(windowsDrivesToUse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton17)
                            .addComponent(jButton16))
                        .addGap(0, 23, Short.MAX_VALUE))
                    .addComponent(jScrollPane9)))
        );

        jTabbedPane2.addTab("Known webroot patterns", jPanel5);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(optimizeDocrootTraversalsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optimizeDocrootTraversalsBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Webroot options", jPanel2);

        slashesToUseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All (default &  recommended)", "Win \\", "Nix /" }));
            slashesToUseCombo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    slashesToUseComboActionPerformed(evt);
                }
            });

            useAbsoluteWebrootsBox.setText("Include absolute webroots");

            LFIModeCheckBox.setText("LFI mode (don't use webroots)");

            LFIOptimizeCheckBox.setText("Longest traversal only");

            jTextPane1.setText("18");
            jScrollPane1.setViewportView(jTextPane1);

            jLabel2.setText("Directory separator to use:");

            jLabel10.setText("MAX traversals:");

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(28, 28, 28)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(52, 52, 52))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(LFIModeCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(20, 20, 20)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(slashesToUseCombo, 0, 435, Short.MAX_VALUE)
                                .addComponent(useAbsoluteWebrootsBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(LFIOptimizeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(481, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(slashesToUseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(useAbsoluteWebrootsBox)
                        .addComponent(LFIModeCheckBox))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LFIOptimizeCheckBox)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(656, 656, 656))
            );

            jTabbedPane1.addTab("Traversal options", jPanel1);

            scannerChecksCheckbox.setText("Enable Scanner checks");
            scannerChecksCheckbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    scannerChecksCheckboxActionPerformed(evt);
                }
            });

            jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "basic", "moderate", "full madness" }));

            fileNameField.setText("etc/passwd");
            jScrollPane4.setViewportView(fileNameField);

            jLabel3.setText("psycho mode:");

            jLabel4.setText("File name:");

            javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
            jPanel4.setLayout(jPanel4Layout);
            jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(scannerChecksCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBox3, 0, 444, Short.MAX_VALUE)
                                .addComponent(jScrollPane4))
                            .addGap(490, 490, 490))))
            );
            jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scannerChecksCheckbox)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addContainerGap(716, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Global settings", jPanel4);

            jLabel5.setText("Byte generator payload provider for Intruder");
            jLabel5.setToolTipText("");

            byteGeneratorRangeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Non-alphanumeric", "Alphanumeric", "Non-alphanumeric printable", "Non-alphanumeric non-printable", "Non-alphanumeric non-printable < 128", "All" }));
            byteGeneratorRangeCombo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    byteGeneratorRangeComboActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
            jPanel8.setLayout(jPanel8Layout);
            jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(byteGeneratorRangeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(408, Short.MAX_VALUE))
            );
            jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel8Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(byteGeneratorRangeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(739, Short.MAX_VALUE))
            );

            jLabel5.getAccessibleContext().setAccessibleName("");

            jTabbedPane1.addTab("Byte generator", jPanel8);

            evasiveList.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = { "....//", "...//", ".....///", ".{BREAK}.{BREAK}/" };
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });
            jScrollPane2.setViewportView(evasiveList);

            evasiveTechniquesSetToAdd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Basic (default)", "Anti-non-recurrent filters", "Breakup string", "Mixed encoding", "All", "None" }));
            evasiveTechniquesSetToAdd.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    evasiveTechniquesSetToAddActionPerformed(evt);
                }
            });

            breakupList.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = { "20" };
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });
            jScrollPane3.setViewportView(breakupList);

            jCheckBox1.setText("Use mixed encodings");

            rawEncodingCheckbox.setText("RAW");

            jCheckBox8.setText("URL");

            doubleUrl.setText("Double URL");

            jCheckBox10.setText("UTF overlong8");

            jCheckBox11.setText("UTF overlong16");

            jLabel6.setText("Encodings to use:");

            jLabel8.setText("Breakup strings to replace {BREAK} holder:");

            jButton1.setText("Add");

            breakupASCIIFormat.setText("ASCII");
            breakupASCIIFormat.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    breakupASCIIFormatActionPerformed(evt);
                }
            });

            breakupHexFormat.setText("HEX");
            breakupHexFormat.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    breakupHexFormatActionPerformed(evt);
                }
            });

            jLabel11.setText("Display & input format:");

            javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
            jPanel3.setLayout(jPanel3Layout);
            jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(breakupASCIIFormat)
                            .addGap(27, 27, 27)
                            .addComponent(breakupHexFormat))
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(evasiveTechniquesSetToAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(86, 86, 86)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rawEncodingCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox8)
                                    .addComponent(doubleUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox11, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(584, Short.MAX_VALUE))
            );
            jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(evasiveTechniquesSetToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(rawEncodingCheckbox)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCheckBox8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(doubleUrl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCheckBox10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jCheckBox1)
                            .addGap(93, 93, 93)))
                    .addGap(28, 28, 28)
                    .addComponent(jLabel8)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel11)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(breakupASCIIFormat)
                        .addComponent(breakupHexFormat))
                    .addContainerGap(250, Short.MAX_VALUE))
            );

            jTabbedPane1.addTab("Evasive techniques", jPanel3);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 83, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane1)
            );

            jTabbedPane1.getAccessibleContext().setAccessibleName("Webroot options");
            jTabbedPane1.getAccessibleContext().setAccessibleDescription("");
        }// </editor-fold>//GEN-END:initComponents

    private void scannerChecksCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scannerChecksCheckboxActionPerformed
        // TODO add your handling code here:
            if(scannerChecksCheckbox.isSelected())
            {
                enableScannerChecks();
            }
            else
            {
                disableScannerChecks();
            }
    }//GEN-LAST:event_scannerChecksCheckboxActionPerformed

    private void targetPasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetPasteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_targetPasteButtonActionPerformed

    private void slashesToUseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slashesToUseComboActionPerformed
        // this.slashesToUse="all";
        switch(slashesToUseCombo.getSelectedIndex())
        { 
            case 0 : { this.slashesToUse="all"; break;}
            case 1 : { this.slashesToUse="win"; break;}
            case 2 : { this.slashesToUse="nix"; break;}
        }
    }//GEN-LAST:event_slashesToUseComboActionPerformed

    private void optimizeDocrootTraversalsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optimizeDocrootTraversalsBoxActionPerformed
        // TODO add your handling code here:
        // change the state
        if(optimizeDocroots==true)
        {
            optimizeDocroots=false;
        }
        else
        {
            optimizeDocroots=true;
        }
    }//GEN-LAST:event_optimizeDocrootTraversalsBoxActionPerformed

    private void byteGeneratorRangeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byteGeneratorRangeComboActionPerformed
        // TODO add your handling code here:
             switch (byteGeneratorRangeCombo.getSelectedIndex()) {
                case 0:
                {
                    this.byteGeneratorRange = "non-alpha";
                    break;
                }
                case 1:
                {
                    this.byteGeneratorRange = "alpha";           
                    break;
                }
                case 2:
                {
                    this.byteGeneratorRange = "non-alpha-print";
                    break;
                }
                case 3:
                {
                    this.byteGeneratorRange = "non-alpha-non-print";
                    break;
                }
                case 4:
                {
                    this.byteGeneratorRange = "non-alpha-non-print-low";
                    break;
                }
                case 5:
                {
                    this.byteGeneratorRange = "all";
                    break;
                }
            }
    }//GEN-LAST:event_byteGeneratorRangeComboActionPerformed

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void evasiveTechniquesSetToAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evasiveTechniquesSetToAddActionPerformed
        // TODO add your handling code here:
            switch(evasiveTechniquesSetToAdd.getSelectedIndex())
            { 
                case 0 : { 
                    this.initiateEvasiveList();
                    break;
                }
                case 1 : { appendListData(evasiveList,this.nonRecurrentEvasiveTraversals); break;}
                case 2 : { appendListData(evasiveList,this.breakupHolderTraversals); break;}
                case 3 : { 
                    appendListData(evasiveList,this.nonRecurrentEvasiveTraversals); 
                    appendListData(evasiveList,this.breakupHolderTraversals);
                    break;
                }
                case 4 : {                                
                             this.disableEvasiveTechniques();
                             break;
                         }
            }
    }//GEN-LAST:event_evasiveTechniquesSetToAddActionPerformed

    private void suffixClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suffixClearButtonActionPerformed

        String [] empty = {};
        suffixesList.setListData(empty); //for some weird reason removeAll did not want to work.
        //suffixesList.Clear();
    }//GEN-LAST:event_suffixClearButtonActionPerformed

    private void suffixRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suffixRemoveButtonActionPerformed
        // TODO add your handling code here:

        if(suffixesList.getSelectedIndex()!=-1)
        {
            ArrayList<String> toRemove = new ArrayList<>();
            int indices[]=suffixesList.getSelectedIndices();
                for(int i=0;i<indices.length;i++)
                {
                        toRemove.add((String)suffixesList.getModel().getElementAt(indices[i]));
                }
                for(int i=0;i<toRemove.size();i++)
                {
                   removeFromListData(suffixesList,toRemove.get(i));
                }
            }     
        // remove
    }//GEN-LAST:event_suffixRemoveButtonActionPerformed

    private void suffixAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suffixAddButtonActionPerformed

        // TODO add your handling code here:
        String [] tmp = {suffixAddField.getText()};
        appendListData(suffixesList,tmp);
    }//GEN-LAST:event_suffixAddButtonActionPerformed

    private void windowsDrivesToUseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowsDrivesToUseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_windowsDrivesToUseActionPerformed

    private void suffixLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suffixLoadButtonActionPerformed
        // TODO add your handling code here:
       JFileChooser fc = new JFileChooser();
       int returnVal = fc.showOpenDialog(PsychoPanel2.this);
       if (returnVal == JFileChooser.APPROVE_OPTION) 
       {
            Scanner inFile1;
            try {
               inFile1 = new Scanner(fc.getSelectedFile()).useDelimiter("\\r*\\n");
            } catch (FileNotFoundException ex) {
               Logger.getLogger(PsychoPanel.class.getName()).log(Level.SEVERE, null, ex);
               return;
            }
            List<String> temps = new ArrayList<>();
            while (inFile1.hasNext()) 
            {
                String line = inFile1.next();
                temps.add(line);
                logOutput("[READ] "+line);
            }
            inFile1.close();
            suffixesList.setListData((String[]) temps.toArray());
        }          
    }//GEN-LAST:event_suffixLoadButtonActionPerformed

    private void breakupASCIIFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakupASCIIFormatActionPerformed

        breakupHexFormat.setSelected(false);
        breakupASCIIFormat.setSelected(true);
    }//GEN-LAST:event_breakupASCIIFormatActionPerformed

    private void breakupHexFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakupHexFormatActionPerformed
        breakupHexFormat.setSelected(true);
        breakupASCIIFormat.setSelected(false);
    }//GEN-LAST:event_breakupHexFormatActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JCheckBox LFIModeCheckBox;
    protected javax.swing.JCheckBox LFIOptimizeCheckBox;
    private javax.swing.JRadioButton breakupASCIIFormat;
    private javax.swing.JRadioButton breakupHexFormat;
    protected javax.swing.JList<String> breakupList;
    private javax.swing.JComboBox<String> byteGeneratorRangeCombo;
    protected javax.swing.JList<String> docrootsList;
    protected javax.swing.JCheckBox doubleUrl;
    protected javax.swing.JList<String> drivesList;
    protected javax.swing.JList<String> evasiveList;
    private javax.swing.JComboBox<String> evasiveTechniquesSetToAdd;
    protected javax.swing.JTextPane fileNameField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    protected javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    protected javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane3;
    protected javax.swing.JCheckBox optimizeDocrootTraversalsBox;
    protected javax.swing.JCheckBox rawEncodingCheckbox;
    protected javax.swing.JCheckBox scannerChecksCheckbox;
    protected javax.swing.JComboBox<String> slashesToUseCombo;
    private javax.swing.JButton suffixAddButton;
    private javax.swing.JTextPane suffixAddField;
    private javax.swing.JButton suffixClearButton;
    private javax.swing.JButton suffixLoadButton;
    private javax.swing.JButton suffixPasteButton;
    private javax.swing.JButton suffixRemoveButton;
    protected javax.swing.JList<String> suffixesList;
    private javax.swing.JButton targetClearButton;
    private javax.swing.JButton targetLoadButton;
    private javax.swing.JButton targetPasteButton;
    private javax.swing.JButton targetRemoveButton;
    protected javax.swing.JList<String> targetsList;
    private javax.swing.JCheckBox useAbsoluteWebrootsBox;
    private javax.swing.JButton webrootAddButton;
    private javax.swing.JTextPane webrootAddField;
    private javax.swing.JButton webrootCLearButton;
    private javax.swing.JButton webrootLoadButton;
    private javax.swing.JButton webrootPasteButton;
    private javax.swing.JButton webrootRemoveButton;
    private javax.swing.JComboBox<String> windowsDrivesToUse;
    // End of variables declaration//GEN-END:variables
}
